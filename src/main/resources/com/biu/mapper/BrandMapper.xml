<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->
<mapper namespace="com.biu.mapper.BrandMapper">
    <!--
        数据库表的字段名称  和  实体类的属性名称不一样，则不能自动封装数据
        *起别名: 对不一样的列名起别名， 让别名和实体类的属性名一样
            *缺点: 每次查询都要定义别名
                *sql片段
                    *缺点: 不灵活
        * resultMap
            1. 定义resultMap标签
            2. 在<select> 使用resultMap属性替换 resultType属性
    -->
    <!--
        id: 唯一标识
        type:映射的类型, 支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id: 主键字段映射
                column:表的类名
                property:实体类的属性名
            result: 一般字段映射
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>



    <select id="selectAll" resultMap="brandResultMap">
        select
        *
        from tb_brand;
    </select>


    <!--
        sql片段
    -->
<!--    <sql id="brand_column">
        id,brand_name as brandName,company_name as companyName,ordered,description,status
    </sql>

    <select id="selectAll" resultType="brand">
        select
            <include refid="brand_column"/>
        from tb_brand;
    </select>-->


<!--    <select id="selectAll" resultType="brand">
        select *
        from tb_brand;
    </select>-->


<!--
        参数占位符
        1. #{} 会将其替换为?,为了防止sql注入
        2. ${} 拼接sql，会存在sql注入问题
        3. 使用时机
            参数传递的时候 #{}
            表名或列名不固定的情况下 ${}

        参数类型 parameterType :一般可以省略
        特殊字符处理:比如<
            1. 转义字符
            2. CDATA区  <![CDATA[其他内容]]>
-->
<!--    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id =#{id};
    </select>-->

    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[
           <
        ]]>
        #{id};
    </select>

    <!--
        条件查询
    -->
<!--    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
            status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>-->

    <!--
        动态条件查询
            if: 条件判断
             test: 逻辑表达式
             问题:
                解决:1.恒等式
                    2.<where>替换 关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        /*where 1=1*/
        <where>
        <if test="status !=null">
            and status = #{status}
        </if>
        <if test="companyName !=null and companyName !='' ">
            and company_name like #{companyName}
        </if>
        <if test="brandName !=null and brandName !='' ">
            and brand_name like #{brandName}
        </if>
        </where>
    </select>


<!--    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose>&lt;!&ndash;相当于switch&ndash;&gt;
            <when test="status !=null">&lt;!&ndash;相当于case&ndash;&gt;
                status = #{status}
            </when>
            <when test="companyName !=null and companyName !='' ">&lt;!&ndash;相当于case&ndash;&gt;
                company_name like #{companyName}
            </when>
            <when test="brandName !=null and brandName !='' ">&lt;!&ndash;相当于case&ndash;&gt;
                brand_name like #{brandName}
            </when>
            <otherwise>
                1 = 1
            </otherwise>
        </choose>
    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
        <choose><!--相当于switch-->
            <when test="status !=null"><!--相当于case-->
                status = #{status}
            </when>
            <when test="companyName !=null and companyName !='' "><!--相当于case-->
                company_name like #{companyName}
            </when>
            <when test="brandName !=null and brandName !='' "><!--相当于case-->
                brand_name like #{brandName}
            </when>
<!--            <otherwise>
                1 = 1
            </otherwise>-->
        </choose>
        </where>
    </select>


    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status})
    </insert>


    <update id="update">
        update tb_brand
        <set>
            <if test="brandName !=null and brandName!=''">
                brand_name=#{brandName},
            </if>
            <if test="companyName !=null and companyName!=''">
                company_name=#{companyName},
            </if>
            <if test="ordered !=null ">
                ordered=#{ordered},
            </if>
            <if test="description !=null and description!=''">
                description=#{description},
            </if>
            <if test="status !=null ">
                status=#{status}
            </if>
        </set>
        where id =#{id}
    </update>


    <delete id="delteById">
        delete from tb_brand where id=#{id}
    </delete>


    <!--
        mybatis会将数组参数，封装为一个Map集合
        *默认：array = 数组
        *使用@Param注解改变map集合的默认key名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        ;
    </delete>
</mapper>